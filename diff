diff --git a/CommitAI/CommitAI.csproj b/CommitAI/CommitAI.csproj
index 38caeb1..8ed7703 100644
--- a/CommitAI/CommitAI.csproj
+++ b/CommitAI/CommitAI.csproj
@@ -6,6 +6,7 @@
     <ImplicitUsings>enable</ImplicitUsings>
     <Nullable>enable</Nullable>
     <GenerateDocumentationFile>true</GenerateDocumentationFile>
+    <UserSecretsId>21b0a908-1468-4bfa-9c50-8ee6cf067955</UserSecretsId>
   </PropertyGroup>
 
   <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
@@ -22,6 +23,9 @@
 
 
   <ItemGroup>
+    <PackageReference Include="Microsoft.Extensions.Configuration.UserSecrets" Version="6.0.1" />
+    <PackageReference Include="Microsoft.Extensions.Http" Version="7.0.0" />
+    <PackageReference Include="Newtonsoft.Json" Version="13.0.2" />
     <PackageReference Include="StyleCop.Analyzers" Version="1.2.0-beta.435">
       <PrivateAssets>all</PrivateAssets>
       <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
diff --git a/CommitAI/OpenAi/GitDiffRequestContextConfiguration.cs b/CommitAI/OpenAi/GitDiffRequestContextConfiguration.cs
new file mode 100644
index 0000000..9aecb50
--- /dev/null
+++ b/CommitAI/OpenAi/GitDiffRequestContextConfiguration.cs
@@ -0,0 +1,9 @@
+﻿namespace CommitAI.OpenAi;
+
+public class GitDiffRequestContextConfiguration : IGitDiffRequestContextConfiguration
+{
+    public string GetContext()
+    {
+        return "Give short, compressed git description for changes. Always use imperative form. Example: \"ADD: add TestUser.cs, Add GetAll() in MonitorService.cs. UPDATE: rename User to UserModel.cs\" FORMAT: FORMAT: ADD: (what will be added in which files). UPDATE: (what will be UPDATED in which files). DELETE: (what will be deleted). Omit not important\r\n";
+    }
+}
\ No newline at end of file
diff --git a/CommitAI/OpenAi/IGitDiffRequestContextConfiguration.cs b/CommitAI/OpenAi/IGitDiffRequestContextConfiguration.cs
index af4da54..acfeab0 100644
--- a/CommitAI/OpenAi/IGitDiffRequestContextConfiguration.cs
+++ b/CommitAI/OpenAi/IGitDiffRequestContextConfiguration.cs
@@ -3,12 +3,4 @@
 public interface IGitDiffRequestContextConfiguration
 {
     public string GetContext();
-}
-
-public class GitDiffRequestContextConfiguration : IGitDiffRequestContextConfiguration
-{
-    public string GetContext()
-    {
-        throw new NotImplementedException();
-    }
 }
\ No newline at end of file
diff --git a/CommitAI/OpenAi/IOpenAIService.cs b/CommitAI/OpenAi/IOpenAIService.cs
index ab043eb..b0710cd 100644
--- a/CommitAI/OpenAi/IOpenAIService.cs
+++ b/CommitAI/OpenAi/IOpenAIService.cs
@@ -2,13 +2,5 @@
 
 public interface IOpenAIService
 {
-    public string GetAnswer(string question, string context);
-}
-
-public class OpenAiService : IOpenAIService
-{
-    public string GetAnswer(string question, string context)
-    {
-        throw new NotImplementedException();
-    }
+    public Task<string> GetAnswerAsync(string prompt);
 }
\ No newline at end of file
diff --git a/CommitAI/OpenAi/Models/OpenAIChoice.cs b/CommitAI/OpenAi/Models/OpenAIChoice.cs
new file mode 100644
index 0000000..a2e4e34
--- /dev/null
+++ b/CommitAI/OpenAi/Models/OpenAIChoice.cs
@@ -0,0 +1,3 @@
+﻿namespace CommitAI.OpenAi.Models;
+
+public record OpenAIChoice(string Text);
\ No newline at end of file
diff --git a/CommitAI/OpenAi/Models/OpenAIRequest.cs b/CommitAI/OpenAi/Models/OpenAIRequest.cs
new file mode 100644
index 0000000..0e99833
--- /dev/null
+++ b/CommitAI/OpenAi/Models/OpenAIRequest.cs
@@ -0,0 +1,12 @@
+﻿using Newtonsoft.Json;
+
+namespace CommitAI.OpenAi.Models;
+
+public record OpenAIRequest(
+    [property: JsonProperty("prompt")] string Prompt,
+    [property: JsonProperty("model")] string Model,
+    [property: JsonProperty("temperature")] float Temperature,
+    [property: JsonProperty("max_tokens")] int MaxTokens,
+    [property: JsonProperty("top_p")] float TopP,
+    [property: JsonProperty("frequency_penalty")] int FrequencyPenalty,
+    [property: JsonProperty("presence_penalty")] int PresencePenalty);
\ No newline at end of file
diff --git a/CommitAI/OpenAi/Models/OpenAIResponse.cs b/CommitAI/OpenAi/Models/OpenAIResponse.cs
new file mode 100644
index 0000000..cc35ab5
--- /dev/null
+++ b/CommitAI/OpenAi/Models/OpenAIResponse.cs
@@ -0,0 +1,3 @@
+﻿namespace CommitAI.OpenAi.Models;
+
+public record OpenAIResponse(OpenAIChoice[] Choices);
\ No newline at end of file
diff --git a/CommitAI/OpenAi/OpenAiService.cs b/CommitAI/OpenAi/OpenAiService.cs
new file mode 100644
index 0000000..c83bc94
--- /dev/null
+++ b/CommitAI/OpenAi/OpenAiService.cs
@@ -0,0 +1,51 @@
+﻿using System.Text;
+
+using CommitAI.OpenAi.Models;
+
+using Newtonsoft.Json;
+
+namespace CommitAI.OpenAi;
+
+public class OpenAiService : IOpenAIService
+{
+    private const string OpenAiApiUrl = "https://api.openai.com/v1/completions";
+    private readonly HttpClient _httpClient;
+    private readonly OpenApiConfiguration _openApiConfiguration;
+
+    public OpenAiService(OpenApiConfiguration openApiConfiguration, HttpClient httpClient)
+    {
+        _openApiConfiguration = openApiConfiguration;
+        _httpClient = httpClient;
+    }
+
+    public async Task<string> GetAnswerAsync(string prompt)
+    {
+        var request = new OpenAIRequest(
+            prompt,
+            _openApiConfiguration.Model,
+            _openApiConfiguration.Temperature,
+            _openApiConfiguration.MaxTokens,
+            _openApiConfiguration.TopP,
+            _openApiConfiguration.FrequencyPenalty,
+            _openApiConfiguration.PresencePenalty);
+
+        var json = JsonConvert.SerializeObject(request);
+        var content = new StringContent(json, Encoding.UTF8, "application/json");
+        _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {_openApiConfiguration.ApiKey}");
+
+        var response = await _httpClient.PostAsync("https://api.openai.com/v1/completions", content);
+        if (!response.IsSuccessStatusCode)
+        {
+            throw new("OpenAI API call failed");
+        }
+
+        var jsonResponse = await response.Content.ReadAsStringAsync();
+        var responseObject = JsonConvert.DeserializeObject<OpenAIResponse>(jsonResponse);
+
+        var resultText = responseObject?.Choices[0].Text ?? string.Empty;
+
+        resultText = resultText.Replace("\r", string.Empty).Replace("\n", string.Empty);
+
+        return resultText;
+    }
+}
\ No newline at end of file
diff --git a/CommitAI/OpenAi/OpenApiConfiguration.cs b/CommitAI/OpenAi/OpenApiConfiguration.cs
new file mode 100644
index 0000000..3de0efd
--- /dev/null
+++ b/CommitAI/OpenAi/OpenApiConfiguration.cs
@@ -0,0 +1,10 @@
+﻿namespace CommitAI.OpenAi;
+
+public record OpenApiConfiguration(
+    string ApiKey,
+    string Model = "text-davinci-003",
+    float Temperature = 0.8f,
+    int MaxTokens = 256,
+    float TopP = 1,
+    int FrequencyPenalty = 0,
+    int PresencePenalty = 0);
\ No newline at end of file
diff --git a/CommitAI/Program.cs b/CommitAI/Program.cs
index 1bc52a6..9f9d37a 100644
--- a/CommitAI/Program.cs
+++ b/CommitAI/Program.cs
@@ -1 +1,11 @@
-﻿Console.WriteLine("Hello, World!");
+﻿using CommitAI.OpenAi;
+
+using Microsoft.Extensions.Configuration;
+
+var configuration = new ConfigurationBuilder()
+                    .AddJsonFile($"appsettings.json")
+                    .AddUserSecrets<Program>();
+var config = configuration.Build();
+
+var openApiConfiguration = new OpenApiConfiguration(config["OpenAi:ApiKey"]);
+var openAiService = new OpenAiService(openApiConfiguration, new HttpClient());
\ No newline at end of file
diff --git a/CommitAI/Services/GitDiffRequestProcessor.cs b/CommitAI/Services/GitDiffRequestProcessor.cs
index c6db7a5..2f08775 100644
--- a/CommitAI/Services/GitDiffRequestProcessor.cs
+++ b/CommitAI/Services/GitDiffRequestProcessor.cs
@@ -13,10 +13,12 @@ public class GitDiffRequestProcessor
         _openAiService = openAiService;
     }
 
-    public string GetCommitMessage(string diff)
+    public async Task<string> GetCommitMessageAsync(string diff)
     {
         var context = _contextConfiguration.GetContext();
-        var answer = _openAiService.GetAnswer(diff, context);
+        var prompt = $"{context} {diff}";
+
+        var answer = await _openAiService.GetAnswerAsync(prompt);
         return answer;
     }
 }
\ No newline at end of file
diff --git a/CommitAI/appsettings.json b/CommitAI/appsettings.json
index 5f28270..27fc49a 100644
--- a/CommitAI/appsettings.json
+++ b/CommitAI/appsettings.json
@@ -1 +1,5 @@
-﻿
\ No newline at end of file
+﻿{
+  "OpenAi": {
+    "ApiKey": ""
+  }
+}
\ No newline at end of file
diff --git a/Test/IntegrationTests/GitDiffRequestProcessorIntegrationTests.cs b/Test/IntegrationTests/GitDiffRequestProcessorIntegrationTests.cs
index c383893..2edd1fa 100644
--- a/Test/IntegrationTests/GitDiffRequestProcessorIntegrationTests.cs
+++ b/Test/IntegrationTests/GitDiffRequestProcessorIntegrationTests.cs
@@ -1,23 +1,30 @@
 using CommitAI.OpenAi;
 using CommitAI.Services;
 
+using Microsoft.Extensions.Configuration;
+
 using Shouldly;
 
 namespace IntegrationTests;
 
 public class GitDiffRequestProcessorIntegrationTests
 {
-    private GitDiffRequestProcessor _sut;
+    private readonly GitDiffRequestProcessor _sut;
 
     public GitDiffRequestProcessorIntegrationTests()
     {
-        _sut = new GitDiffRequestProcessor(new GitDiffRequestContextConfiguration(), new OpenAiService());
+        var configuration = new ConfigurationBuilder()
+            .AddJsonFile("appsettings.json", optional: true)
+            .AddUserSecrets<GitDiffRequestProcessorIntegrationTests>()
+            .Build();
+        var openApiConfiguration = new OpenApiConfiguration(configuration["OpenAi:ApiKey"]);
+        _sut = new GitDiffRequestProcessor(new GitDiffRequestContextConfiguration(), new OpenAiService(openApiConfiguration, new HttpClient()));
     }
 
     [Fact]
-    public void GetCommitMessage_ShouldReturnMessageInCorrectFormat()
+    public async Task GetCommitMessage_ShouldReturnMessageInCorrectFormat()
     {
-        var actualCommitMessage = _sut.GetCommitMessage(SampleDiff);
+        var actualCommitMessage = await _sut.GetCommitMessageAsync(SampleDiff);
         actualCommitMessage.ShouldStartWith("UPDATE:");
     }
 
diff --git a/Test/IntegrationTests/IntegrationTests.csproj b/Test/IntegrationTests/IntegrationTests.csproj
index 9a8657e..f6c83ba 100644
--- a/Test/IntegrationTests/IntegrationTests.csproj
+++ b/Test/IntegrationTests/IntegrationTests.csproj
@@ -6,9 +6,11 @@
     <Nullable>enable</Nullable>
     <TreatWarningsAsErrors>True</TreatWarningsAsErrors>
     <IsPackable>false</IsPackable>
+    <UserSecretsId>448c6313-105e-4819-b997-110a4bdf6d2d</UserSecretsId>
   </PropertyGroup>
 
     <ItemGroup>
+        <PackageReference Include="Microsoft.Extensions.Configuration.UserSecrets" Version="6.0.1" />
         <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.4.1" />
         <PackageReference Include="NSubstitute" Version="4.4.0" />
         <PackageReference Include="Shouldly" Version="4.1.0" />
diff --git a/Test/UnitTests/GitDiffRequestProcessorTests.cs b/Test/UnitTests/GitDiffRequestProcessorTests.cs
index 7705a2d..cacf1db 100644
--- a/Test/UnitTests/GitDiffRequestProcessorTests.cs
+++ b/Test/UnitTests/GitDiffRequestProcessorTests.cs
@@ -17,7 +17,7 @@ public class GitDiffRequestProcessorTests
     public GitDiffRequestProcessorTests()
     {
         _openAiService = Substitute.For<IOpenAIService>();
-        _openAiService.GetAnswer(Arg.Any<string>(), Arg.Any<string>()).Returns(CorrectCommitMessage);
+        _openAiService.GetAnswerAsync(Arg.Any<string>()).Returns(CorrectCommitMessage);
         var contextConfiguration = Substitute.For<IGitDiffRequestContextConfiguration>();
         contextConfiguration.GetContext().Returns(CorrectContext);
 
@@ -25,11 +25,27 @@ public class GitDiffRequestProcessorTests
     }
 
     [Fact]
-    public void Process_GivenValidGitDiffRequest_ReturnsCorrectCommitMessage()
+    public async Task Process_GivenValidGitDiffRequest_ReturnsCorrectCommitMessage()
     {
-        var result = _sut.GetCommitMessage("some correct diff");
+        // Act
+        var result = await _sut.GetCommitMessageAsync("some correct diff");
 
-        _openAiService.Received(1).GetAnswer(Arg.Any<string>(), Arg.Any<string>());
+        // Assert
+        _ = await _openAiService.Received(1).GetAnswerAsync(Arg.Any<string>());
         result.ShouldBe(CorrectCommitMessage);
     }
+
+    [Fact]
+    public async Task Process_ShouldCallOpenAiServiceWithCorrectPrompt()
+    {
+        // Arrange
+        const string diff = "some correct diff";
+        var expectedPrompt = $"{CorrectContext} {diff}";
+
+        // Act
+        _ = await _sut.GetCommitMessageAsync(diff);
+
+        // Assert
+        _ = await _openAiService.Received(1).GetAnswerAsync(expectedPrompt);
+    }
 }
\ No newline at end of file
